{"ast":null,"code":"export const COLORS = [\"blue\", \"red\", \"orange\"];\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"];\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"];\nexport const NUMS = [\"one\", \"two\", \"three\"];\nexport function createDeck(level) {\n  let deck = [];\n\n  if (level === \"easy\") {\n    console.log(\"aaa\");\n\n    for (let i = 0; i < SHAPES.length; i++) {\n      for (let j = 0; j < COLORS.length; j++) {\n        for (let k = 0; k < NUMS.length; k++) {\n          console.log(\"aaa\");\n          deck.push({\n            selectStatus: \"unselect\",\n            path: COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k],\n            color: COLORS[j],\n            shape: SHAPES[i],\n            shading: SHADINGS[0],\n            num: NUMS[k]\n          });\n          console.log(deck);\n        }\n      }\n    }\n  }\n\n  return shuffle(deck);\n}\nexport function startNewGame(state) {\n  const newDeck = createDeck(state.level);\n  const newTable = newDeck.slice(0, 12);\n  const deckRemaining = newDeck.slice(12, 81);\n  return { ...state,\n    deck: deckRemaining,\n    tableShow: newTable,\n    selected: []\n  };\n}\n\nfunction shuffle(deck) {\n  for (let i = deck.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * i);\n    let temp = deck[i];\n    deck[i] = deck[j];\n    deck[j] = temp;\n  }\n\n  return deck;\n}","map":{"version":3,"sources":["/Users/huiyuchen/6510_HuiyuChen/HuiyuChen-cs5610-project2-sets-card-game/huiyu-chen-project2/src/Controller/GameController.js"],"names":["COLORS","SHAPES","SHADINGS","NUMS","createDeck","level","deck","console","log","i","length","j","k","push","selectStatus","path","color","shape","shading","num","shuffle","startNewGame","state","newDeck","newTable","slice","deckRemaining","tableShow","selected","Math","floor","random","temp"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,CAAf;AACP,OAAO,MAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,MAArB,CAAf;AACP,OAAO,MAAMC,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAjB;AACP,OAAO,MAAMC,IAAI,GAAG,CAAC,KAAD,EAAO,KAAP,EAAc,OAAd,CAAb;AAEP,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AAC7B,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAID,KAAK,KAAK,MAAd,EAAqB;AACjBE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACS,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,MAAM,CAACU,MAA3B,EAAmCC,CAAC,EAApC,EAAuC;AACnC,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,IAAI,CAACO,MAAxB,EAAgCE,CAAC,EAAjC,EAAoC;AAChCL,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAF,UAAAA,IAAI,CAACO,IAAL,CAAU;AACNC,YAAAA,YAAY,EAAE,UADR;AAENC,YAAAA,IAAI,EAAGf,MAAM,CAACW,CAAD,CAAN,GAAY,GAAZ,GAAkBV,MAAM,CAACQ,CAAD,CAAxB,GAA8B,GAA9B,GAAoCP,QAAQ,CAAC,CAAD,CAA5C,GAAkD,GAAlD,GAAwDC,IAAI,CAACS,CAAD,CAF7D;AAGNI,YAAAA,KAAK,EAAGhB,MAAM,CAACW,CAAD,CAHR;AAINM,YAAAA,KAAK,EAAGhB,MAAM,CAACQ,CAAD,CAJR;AAKNS,YAAAA,OAAO,EAAGhB,QAAQ,CAAC,CAAD,CALZ;AAMNiB,YAAAA,GAAG,EAAGhB,IAAI,CAACS,CAAD;AANJ,WAAV;AAQAL,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH;AACJ;AACJ;AACJ;;AACD,SAAOc,OAAO,CAACd,IAAD,CAAd;AACH;AAGD,OAAO,SAASe,YAAT,CAAsBC,KAAtB,EAA4B;AAC/B,QAAMC,OAAO,GAAGnB,UAAU,CAACkB,KAAK,CAACjB,KAAP,CAA1B;AACA,QAAMmB,QAAQ,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAgB,EAAhB,CAAjB;AACA,QAAMC,aAAa,GAAGH,OAAO,CAACE,KAAR,CAAc,EAAd,EAAiB,EAAjB,CAAtB;AACA,SAAM,EACF,GAAGH,KADD;AAEFhB,IAAAA,IAAI,EAACoB,aAFH;AAGFC,IAAAA,SAAS,EAAEH,QAHT;AAIFI,IAAAA,QAAQ,EAAC;AAJP,GAAN;AAMH;;AAED,SAASR,OAAT,CAAiBd,IAAjB,EAAuB;AAEnB,OAAK,IAAIG,CAAC,GAAGH,IAAI,CAACI,MAAL,GAAc,CAA3B,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAAyC;AACrC,QAAIE,CAAC,GAAGkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBtB,CAA3B,CAAR;AACA,QAAIuB,IAAI,GAAG1B,IAAI,CAACG,CAAD,CAAf;AACAH,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAACK,CAAD,CAAd;AACAL,IAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUqB,IAAV;AACH;;AAED,SAAO1B,IAAP;AACH","sourcesContent":["export const COLORS = [\"blue\", \"red\", \"orange\"]\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"]\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"]\nexport const NUMS = [\"one\",\"two\", \"three\"]\n\nexport function createDeck(level){\n    let deck = []\n\n    if (level === \"easy\"){\n        console.log(\"aaa\");\n        for (let i = 0; i < SHAPES.length; i++ ){\n            for (let j = 0; j < COLORS.length; j++){\n                for(let k = 0; k < NUMS.length; k++){\n                    console.log(\"aaa\");\n                    deck.push({\n                        selectStatus: \"unselect\",\n                        path : COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k],\n                        color : COLORS[j],\n                        shape : SHAPES[i],\n                        shading : SHADINGS[0],\n                        num : NUMS[k],\n                    });\n                    console.log(deck);\n                }\n            }\n        }\n    }\n    return shuffle(deck);\n}\n\n\nexport function startNewGame(state){\n    const newDeck = createDeck(state.level);\n    const newTable = newDeck.slice(0,12);\n    const deckRemaining = newDeck.slice(12,81);\n    return{\n        ...state,\n        deck:deckRemaining,\n        tableShow: newTable,\n        selected:[],\n    }\n}\n\nfunction shuffle(deck) {\n    \n    for (let i = deck.length - 1; i > 0; i--){\n        let j = Math.floor(Math.random() * i);\n        let temp = deck[i];\n        deck[i] = deck[j];\n        deck[j] = temp;\n    }\n\n    return deck;\n}"]},"metadata":{},"sourceType":"module"}