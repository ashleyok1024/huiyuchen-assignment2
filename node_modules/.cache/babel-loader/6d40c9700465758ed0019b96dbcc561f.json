{"ast":null,"code":"export const COLORS = [\"blue\", \"red\", \"orange\"];\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"];\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"];\nexport const NUMS = [\"one\", \"two\", \"three\"];\nexport function createDeck(level) {\n  let deck = []; //easy mode -27 cards\n\n  if (level === \"easy\") {\n    for (let i = 0; i < SHAPES.length; i++) {\n      for (let j = 0; j < COLORS.length; j++) {\n        for (let k = 0; k < NUMS.length; k++) {\n          deck.push({\n            selectStatus: \"unselect\",\n            path: \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k] + \".svg\",\n            color: COLORS[j],\n            shape: SHAPES[i],\n            shading: SHADINGS[0],\n            num: NUMS[k]\n          });\n          console.log(deck);\n        }\n      }\n    } // normal or heard mode-81 cards\n\n  } else {\n    for (let i = 0; i < SHAPES.length; i++) {\n      for (let j = 0; j < COLORS.length; j++) {\n        for (let k = 0; k < NUMS.length; k++) {\n          for (let n = 0; n < SHADINGS.length; n++) {\n            deck.push({\n              selectStatus: \"unselect\",\n              path: \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[n] + \"/\" + NUMS[k] + \".svg\",\n              color: COLORS[j],\n              shape: SHAPES[i],\n              shading: SHADINGS[n],\n              num: NUMS[k]\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return shuffle(deck);\n}\nexport function startNewGame(state) {\n  const newDeck = createDeck(state.level);\n  const newTable = newDeck.slice(0, 12);\n  const deckRemaining = newDeck.slice(12, 81);\n  let newState = { ...state,\n    deck: deckRemaining,\n    tableShow: newTable,\n    selected: []\n  };\n  return checkGameStatus(newState);\n}\n\nfunction shuffle(deck) {\n  for (let i = deck.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * i);\n    let temp = deck[i];\n    deck[i] = deck[j];\n    deck[j] = temp;\n  }\n\n  return deck;\n}\n\nexport function selectCard(state, action) {\n  let NewTableShow = [];\n  let selectedCardUrl = action.value;\n  let newSelected = state.selected;\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.path === selectedCardUrl) {\n      let NewSelectedCard = { ...curCard,\n        selectStatus: \"selected\"\n      };\n      NewTableShow.push(NewSelectedCard);\n      newSelected.push(NewSelectedCard);\n    } else {\n      NewTableShow.push(curCard);\n    }\n  }\n\n  let newState = { ...state,\n    selected: newSelected,\n    tableShow: NewTableShow\n  };\n  console.log(\"Is there a SET on the table? \", setOnTable(newState.tableShow));\n\n  if (newState.selected.length < 3 || !newState.selected) {\n    return newState;\n  } else {\n    if (isValidSet(newState.selected)) {\n      console.log(\"Right set!\");\n      return replaceAnotherThree(newState);\n    } else {\n      refreshSelected(newState);\n      console.log(\"Try again!\");\n    }\n  }\n}\n\nfunction isValidSet(selected) {\n  let shadingSet = new Set();\n  let numSet = new Set();\n  let colorSet = new Set();\n  let shapeSet = new Set();\n\n  for (let i = 0; i < 3; i++) {\n    colorSet.add(selected[i].color);\n    shapeSet.add(selected[i].shape);\n    shadingSet.add(selected[i].shading);\n    numSet.add(selected[i].num);\n  } //all same(1) or all different(3)\n\n\n  if (shadingSet.size === 2 || numSet.size === 2 || colorSet.size === 2 || shapeSet.size === 2) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction replaceAnotherThree(state) {\n  let newDeck = state.deck;\n  let newTableShow = [];\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.selectStatus === \"unselect\") {\n      newTableShow.push(curCard);\n    }\n  }\n\n  for (let j = 0; j < 3; j++) {\n    if (newDeck.length > 0 && state.tableShow.length <= 12) {\n      newTableShow.push(newDeck.pop());\n    }\n  }\n\n  let newState = { ...state,\n    deck: newDeck,\n    tableShow: newTableShow,\n    selected: []\n  };\n  return newState;\n}\n\nexport function draw3Cards(state) {\n  let cards = state.deck.slice(0, 3);\n  let newDeck = state.deck.slice(3, state, deck.length);\n  let newTableShow = state.tableShow.concat(cards);\n  let newState = { ...state,\n    tableShow: newTableShow,\n    deck: newDeck,\n    selected: state.selected\n  };\n  return checkGameStatus(newState);\n}\n\nfunction checkGameStatus(newState) {\n  while (newState.deck.length > 0 && newState.mode !== \"hard\" && !setExistsOnTable(newState.onTable)) {\n    newState = moreCards(newState);\n    console.log(\"Is there a SET on the table? \", setExistsOnTable(newState.onTable));\n  }\n\n  if (newState.deck.length === 0 && !setExistsOnTable(newState.onTable)) {\n    toast.info(\"Congrats! GAME END!\", {\n      autoClose: 4000,\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n    return {\n      gameStarted: false,\n      mode: \"normal\",\n      deck: [],\n      onTable: [],\n      selectedCards: []\n    };\n  }\n\n  return newState;\n}\n\nfunction refreshSelected(state) {\n  let newTableShow = [];\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.selectStatus === \"selected\") {\n      newTableShow.push({ ...curCard,\n        selectStatus: \"unselect\"\n      });\n    } else {\n      newTableShow.push(curCard);\n    }\n  }\n\n  const newState = { ...state,\n    tableShow: newTableShow,\n    selected: []\n  };\n  return newState;\n}\n\nfunction setOnTable(tableShow) {\n  if (!tableShow) {\n    return false;\n  }\n\n  for (let i = 0; i < tableShow.length; i++) {\n    for (let j = i + 1; j < tableShow.length; j++) {\n      for (let k = j + 1; k < tableShow.length; k++) {\n        let curSet = [tableShow[i], tableShow[j], tableShow[k]];\n\n        if (isValidSet(curSet)) {\n          console.log(\"Index[\", i, j, k, \"] on the table is a SET.\");\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/huiyuchen/6510_HuiyuChen/HuiyuChen-cs5610-project2-sets-card-game/huiyu-chen-project2/src/Controller/Functions.js"],"names":["COLORS","SHAPES","SHADINGS","NUMS","createDeck","level","deck","i","length","j","k","push","selectStatus","path","color","shape","shading","num","console","log","n","shuffle","startNewGame","state","newDeck","newTable","slice","deckRemaining","newState","tableShow","selected","checkGameStatus","Math","floor","random","temp","selectCard","action","NewTableShow","selectedCardUrl","value","newSelected","curCard","NewSelectedCard","setOnTable","isValidSet","replaceAnotherThree","refreshSelected","shadingSet","Set","numSet","colorSet","shapeSet","add","size","newTableShow","pop","draw3Cards","cards","concat","mode","setExistsOnTable","onTable","moreCards","toast","info","autoClose","position","POSITION","BOTTOM_CENTER","gameStarted","selectedCards","curSet"],"mappings":"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","sourcesContent":["export const COLORS = [\"blue\", \"red\", \"orange\"]\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"]\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"]\nexport const NUMS = [\"one\",\"two\", \"three\"]\n\nexport function createDeck(level){\n    let deck = []\n    //easy mode -27 cards\n    if (level === \"easy\"){\n        for (let i = 0; i < SHAPES.length; i++ ){\n            for (let j = 0; j < COLORS.length; j++){\n                for(let k = 0; k < NUMS.length; k++){\n                    deck.push({\n                        selectStatus: \"unselect\",\n                        path : \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k]+\".svg\",\n                        color : COLORS[j],\n                        shape : SHAPES[i],\n                        shading : SHADINGS[0],\n                        num : NUMS[k],\n                    });\n                    console.log(deck);\n                }\n            }\n        }\n        // normal or heard mode-81 cards\n    } else{\n        for (let i = 0; i < SHAPES.length; i++ ){\n            for (let j = 0; j < COLORS.length; j++){\n                for(let k = 0; k < NUMS.length; k++){\n                    for(let n = 0; n < SHADINGS.length; n++){\n                        deck.push({\n                            selectStatus: \"unselect\",\n                            path : \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[n] + \"/\" + NUMS[k]+\".svg\",\n                            color : COLORS[j],\n                            shape : SHAPES[i],\n                            shading : SHADINGS[n],\n                            num : NUMS[k],\n                        });\n\n                    }\n                }\n            }\n        }\n\n    }\n    return shuffle(deck);\n}\n\n\nexport function startNewGame(state){\n    const newDeck = createDeck(state.level);\n    const newTable = newDeck.slice(0,12);\n    const deckRemaining = newDeck.slice(12,81);\n    let newState = {\n        ...state,\n        deck:deckRemaining,\n        tableShow: newTable,\n        selected:[],\n    }\n    return checkGameStatus(newState);\n}\n\nfunction shuffle(deck) {\n    \n    for (let i = deck.length - 1; i > 0; i--){\n        let j = Math.floor(Math.random() * i);\n        let temp = deck[i];\n        deck[i] = deck[j];\n        deck[j] = temp;\n    }\n\n    return deck;\n}\n\nexport function selectCard(state, action){\n\n    let NewTableShow = [];\n    let selectedCardUrl = action.value;\n    let newSelected = state.selected;\n    \n    for(let i = 0; i< state.tableShow.length; i++){\n        let curCard = state.tableShow[i];\n        if(curCard.path === selectedCardUrl){\n            let NewSelectedCard = {...curCard, selectStatus:\"selected\"};\n            NewTableShow.push(NewSelectedCard);\n            newSelected.push(NewSelectedCard);\n        }else{\n            NewTableShow.push(curCard);\n        }\n        \n    }\n\n    let newState = {...state, \n        selected:newSelected, \n        tableShow:NewTableShow};\n\n    console.log(\"Is there a SET on the table? \",setOnTable(newState.tableShow));\n    if(newState.selected.length<3 || !newState.selected){\n        return newState;\n    }else{\n        if(isValidSet(newState.selected)){\n            console.log(\"Right set!\");\n            return replaceAnotherThree(newState);\n        }else{\n            refreshSelected(newState)\n            console.log(\"Try again!\");\n        }\n    }\n\n\n}\nfunction isValidSet(selected){\n    let shadingSet = new Set();\n    let numSet = new Set();\n    let colorSet = new Set();\n    let shapeSet = new Set();\n\n    for (let i=0; i<3; i++){\n        colorSet.add(selected[i].color);\n        shapeSet.add(selected[i].shape);\n        shadingSet.add(selected[i].shading);\n        numSet.add(selected[i].num);\n    }\n    //all same(1) or all different(3)\n    if (shadingSet.size === 2 || numSet.size === 2 ||colorSet.size === 2 || shapeSet.size === 2 ) {\n        return false;\n    }\n\n    return true;\n\n}\n\nfunction replaceAnotherThree(state){\n    let newDeck = state.deck\n    let newTableShow = []\n\n    for(let i = 0; i< state.tableShow.length; i++){\n        let curCard = state.tableShow[i];\n        if (curCard.selectStatus === \"unselect\"){\n            newTableShow.push(curCard)\n        }\n    }\n\n    for(let j = 0; j < 3; j++){\n        if(newDeck.length > 0 && state.tableShow.length <= 12){\n            newTableShow.push(newDeck.pop());\n        }\n    }\n    let newState = {...state, deck: newDeck, tableShow: newTableShow, selected: []};\n    return newState;\n\n}\n\nexport function draw3Cards(state){\n    let cards = state.deck.slice(0,3);\n    let newDeck = state.deck.slice(3, state,deck.length);\n    let newTableShow = state.tableShow.concat(cards);\n\n    let newState = {\n        ...state,\n        tableShow : newTableShow,\n        deck :newDeck,\n        selected : state.selected,\n        \n    }\n    return checkGameStatus(newState);\n\n}\n\nfunction checkGameStatus(newState){\n       \n       while (newState.deck.length > 0 && newState.mode !== \"hard\" && !setExistsOnTable(newState.onTable)) {\n        newState = moreCards(newState);\n        console.log(\"Is there a SET on the table? \",setExistsOnTable(newState.onTable));\n    }\n\n    if (newState.deck.length === 0 && !setExistsOnTable(newState.onTable)){\n        toast.info(\"Congrats! GAME END!\",{autoClose:4000, position: toast.POSITION.BOTTOM_CENTER,});\n        return {\n            gameStarted: false, \n            mode: \"normal\", \n            deck: [], \n            onTable:[], \n            selectedCards:[],\n        }\n    }\n\n    return newState;\n}\n\nfunction refreshSelected(state){\n    let newTableShow = []\n\n    for(let i = 0; i < state.tableShow.length; i++){\n        let curCard = state.tableShow[i]\n        if(curCard.selectStatus === \"selected\"){\n            newTableShow.push({...curCard, selectStatus:\"unselect\",})\n        }else{\n            newTableShow.push(curCard);\n        }\n    }\n    const newState = {...state, \n                    tableShow:newTableShow, \n                    selected:[]};\n    return newState;\n}\n\nfunction setOnTable(tableShow){\n    if(!tableShow){\n        return false;\n    }\n    for (let i = 0; i < tableShow.length; i++) {\n        for (let j = i + 1; j < tableShow.length; j++) {\n            for (let k = j + 1; k < tableShow.length; k++) {\n                let curSet = [tableShow[i], tableShow[j], tableShow[k]];\n                if (isValidSet(curSet)){\n                    console.log(\"Index[\",i, j, k, \"] on the table is a SET.\");\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n    \n}"]},"metadata":{},"sourceType":"module"}