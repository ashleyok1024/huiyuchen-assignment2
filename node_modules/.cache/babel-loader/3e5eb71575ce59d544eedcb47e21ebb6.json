{"ast":null,"code":"export const COLORS = [\"blue\", \"red\", \"orange\"];\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"];\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"];\nexport const NUMS = [\"one\", \"two\", \"three\"];\nexport function createDeck(level) {\n  let deck = []; //easy mode -27 cards\n\n  if (level === \"easy\") {\n    for (let i = 0; i < SHAPES.length; i++) {\n      for (let j = 0; j < COLORS.length; j++) {\n        for (let k = 0; k < NUMS.length; k++) {\n          deck.push({\n            selectStatus: \"unselect\",\n            path: \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k] + \".svg\",\n            color: COLORS[j],\n            shape: SHAPES[i],\n            shading: SHADINGS[0],\n            num: NUMS[k]\n          });\n          console.log(deck);\n        }\n      }\n    } // normal or heard mode-81 cards\n\n  } else {\n    for (let i = 0; i < SHAPES.length; i++) {\n      for (let j = 0; j < COLORS.length; j++) {\n        for (let k = 0; k < NUMS.length; k++) {\n          for (let n = 0; n < SHADINGS.length; n++) {\n            deck.push({\n              selectStatus: \"unselect\",\n              path: \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[n] + \"/\" + NUMS[k] + \".svg\",\n              color: COLORS[j],\n              shape: SHAPES[i],\n              shading: SHADINGS[n],\n              num: NUMS[k]\n            });\n          }\n        }\n      }\n    }\n  }\n\n  return shuffle(deck);\n}\nexport function startNewGame(state) {\n  console.log(state.level);\n  const newDeck = createDeck(state.level);\n  const newTable = newDeck.slice(0, 12);\n  const deckRemaining = newDeck.slice(12, 81);\n  return { ...state,\n    deck: deckRemaining,\n    tableShow: newTable,\n    selected: []\n  };\n}\n\nfunction shuffle(deck) {\n  for (let i = deck.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * i);\n    let temp = deck[i];\n    deck[i] = deck[j];\n    deck[j] = temp;\n  }\n\n  return deck;\n}\n\nexport function selectCard(state, action) {\n  //let curState = {...state};\n  //if (!state.selected.length) {\n  curState = refreshSelected(state); //}\n\n  let NewTableShow = [];\n  let selectedCardUrl = action.value;\n  let newSelected = curState.selected;\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.path === selectedCardUrl) {\n      let NewSelectedCard = { ...curCard,\n        selectStatus: \"selected\"\n      };\n      NewTableShow.push(NewSelectedCard);\n      newSelected.push(NewSelectedCard);\n    } else {\n      NewTableShow.push(curCard);\n    }\n  }\n\n  let newState = { ...state,\n    selected: newSelected,\n    tableShow: NewTableShow\n  };\n\n  if (newState.selected.length < 3 || !newState.selected) {\n    return newState;\n  } else {\n    if (isValidSet(newState.selected)) {\n      console.log(\"Right set!\");\n      return replaceAnotherThree(newState);\n    } else {\n      refreshSelected(newState);\n      console.log(\"Try again!\");\n    }\n  }\n}\n\nfunction isValidSet(selected) {\n  let shadingSet = new Set();\n  let numSet = new Set();\n  let colorSet = new Set();\n  let shapeSet = new Set();\n\n  for (let i = 0; i < 3; i++) {\n    colorSet.add(selected[i].color);\n    shapeSet.add(selected[i].shape);\n    shadingSet.add(selected[i].shading);\n    numSet.add(selected[i].num);\n  } //all same(1) or all different(3)\n\n\n  if (shadingSet.size === 2 || numSet.size === 2 || colorSet.size === 2 || shapeSet.size === 2) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction replaceAnotherThree(state) {\n  let newDeck = state.deck;\n  let newTableShow = [];\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.selectStatus === \"unselect\") {\n      newTableShow.push(curCard);\n    }\n  }\n\n  for (let j = 0; j < 3; j++) {\n    if (newDeck.length > 0 && state.tableShow.length <= 12) {\n      newTableShow.push(newDeck.pop());\n    }\n  }\n\n  let newState = { ...state,\n    deck: newDeck,\n    tableShow: newTableShow,\n    selected: []\n  };\n  return newState;\n}\n\nfunction refreshSelected(state) {\n  let newTableShow = [];\n\n  for (let i = 0; i < state.tableShow.length; i++) {\n    let curCard = state.tableShow[i];\n\n    if (curCard.selectStatus === \"selected\") {\n      newTableShow.push({ ...curCard,\n        selectStatus: \"unselect\"\n      });\n    } else {\n      newTableShow.push(curCard);\n    }\n  }\n\n  const newState = { ...state,\n    tableShow: newTableShow,\n    selected: []\n  };\n  return newState;\n}","map":{"version":3,"sources":["/Users/huiyuchen/6510_HuiyuChen/HuiyuChen-cs5610-project2-sets-card-game/huiyu-chen-project2/src/Controller/Functions.js"],"names":["COLORS","SHAPES","SHADINGS","NUMS","createDeck","level","deck","i","length","j","k","push","selectStatus","path","color","shape","shading","num","console","log","n","shuffle","startNewGame","state","newDeck","newTable","slice","deckRemaining","tableShow","selected","Math","floor","random","temp","selectCard","action","curState","refreshSelected","NewTableShow","selectedCardUrl","value","newSelected","curCard","NewSelectedCard","newState","isValidSet","replaceAnotherThree","shadingSet","Set","numSet","colorSet","shapeSet","add","size","newTableShow","pop"],"mappings":"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","sourcesContent":["export const COLORS = [\"blue\", \"red\", \"orange\"]\nexport const SHAPES = [\"diamond\", \"heart\", \"oval\"]\nexport const SHADINGS = [\"empty\", \"stripe\", \"solid\"]\nexport const NUMS = [\"one\",\"two\", \"three\"]\n\nexport function createDeck(level){\n    let deck = []\n    //easy mode -27 cards\n    if (level === \"easy\"){\n        for (let i = 0; i < SHAPES.length; i++ ){\n            for (let j = 0; j < COLORS.length; j++){\n                for(let k = 0; k < NUMS.length; k++){\n                    deck.push({\n                        selectStatus: \"unselect\",\n                        path : \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[0] + \"/\" + NUMS[k]+\".svg\",\n                        color : COLORS[j],\n                        shape : SHAPES[i],\n                        shading : SHADINGS[0],\n                        num : NUMS[k],\n                    });\n                    console.log(deck);\n                }\n            }\n        }\n        // normal or heard mode-81 cards\n    } else{\n        for (let i = 0; i < SHAPES.length; i++ ){\n            for (let j = 0; j < COLORS.length; j++){\n                for(let k = 0; k < NUMS.length; k++){\n                    for(let n = 0; n < SHADINGS.length; n++){\n                        deck.push({\n                            selectStatus: \"unselect\",\n                            path : \"card/\" + COLORS[j] + \"/\" + SHAPES[i] + \"/\" + SHADINGS[n] + \"/\" + NUMS[k]+\".svg\",\n                            color : COLORS[j],\n                            shape : SHAPES[i],\n                            shading : SHADINGS[n],\n                            num : NUMS[k],\n                        });\n\n                    }\n                }\n            }\n        }\n\n    }\n    return shuffle(deck);\n}\n\n\nexport function startNewGame(state){\n    console.log(state.level);\n    const newDeck = createDeck(state.level);\n    const newTable = newDeck.slice(0,12);\n    const deckRemaining = newDeck.slice(12,81);\n    return{\n        ...state,\n        deck:deckRemaining,\n        tableShow: newTable,\n        selected:[],\n    }\n}\n\nfunction shuffle(deck) {\n    \n    for (let i = deck.length - 1; i > 0; i--){\n        let j = Math.floor(Math.random() * i);\n        let temp = deck[i];\n        deck[i] = deck[j];\n        deck[j] = temp;\n    }\n\n    return deck;\n}\n\nexport function selectCard(state, action){\n    //let curState = {...state};\n\n    //if (!state.selected.length) {\n        curState = refreshSelected(state);\n    //}\n\n    let NewTableShow = [];\n    let selectedCardUrl = action.value;\n    let newSelected = curState.selected;\n\n    for(let i = 0; i< state.tableShow.length; i++){\n        let curCard = state.tableShow[i];\n        if(curCard.path === selectedCardUrl){\n            let NewSelectedCard = {...curCard, selectStatus:\"selected\"};\n            NewTableShow.push(NewSelectedCard);\n            newSelected.push(NewSelectedCard);\n        }else{\n            NewTableShow.push(curCard);\n        }\n        \n    }\n\n    let newState = {...state, \n        selected:newSelected, \n        tableShow:NewTableShow};\n\n    if(newState.selected.length<3 || !newState.selected){\n        return newState;\n    }else{\n        if(isValidSet(newState.selected)){\n            console.log(\"Right set!\");\n            return replaceAnotherThree(newState);\n        }else{\n            refreshSelected(newState)\n            console.log(\"Try again!\");\n        }\n    }\n\n\n}\nfunction isValidSet(selected){\n    let shadingSet = new Set();\n    let numSet = new Set();\n    let colorSet = new Set();\n    let shapeSet = new Set();\n\n    for (let i=0; i<3; i++){\n        colorSet.add(selected[i].color);\n        shapeSet.add(selected[i].shape);\n        shadingSet.add(selected[i].shading);\n        numSet.add(selected[i].num);\n    }\n    //all same(1) or all different(3)\n    if (shadingSet.size === 2 || numSet.size === 2 ||colorSet.size === 2 || shapeSet.size === 2 ) {\n        return false;\n    }\n\n    return true;\n\n}\n\nfunction replaceAnotherThree(state){\n    let newDeck = state.deck\n    let newTableShow = []\n\n    for(let i = 0; i< state.tableShow.length; i++){\n        let curCard = state.tableShow[i];\n        if (curCard.selectStatus === \"unselect\"){\n            newTableShow.push(curCard)\n        }\n    }\n\n    for(let j = 0; j < 3; j++){\n        if(newDeck.length > 0 && state.tableShow.length <= 12){\n            newTableShow.push(newDeck.pop());\n        }\n    }\n    let newState = {...state, deck: newDeck, tableShow: newTableShow, selected: []};\n    return newState;\n\n}\n\nfunction refreshSelected(state){\n    let newTableShow = []\n\n    for(let i = 0; i < state.tableShow.length; i++){\n        let curCard = state.tableShow[i]\n        if(curCard.selectStatus === \"selected\"){\n            newTableShow.push({...curCard, selectStatus:\"unselect\",})\n        }else{\n            newTableShow.push(curCard);\n        }\n    }\n    const newState = {...state, tableShow: newTableShow, selected: []};\n    return newState;\n}"]},"metadata":{},"sourceType":"module"}